// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication1;

#nullable disable

namespace WebApplication1.Migrations
{
    [DbContext(typeof(TripsDatabaseContext))]
    [Migration("20240320220049_FirstMigration")]
    partial class FirstMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TripParticipantTripReview", b =>
                {
                    b.Property<int>("TripParticipantsParticipantId")
                        .HasColumnType("int");

                    b.Property<int>("TripReviewsReviewId")
                        .HasColumnType("int");

                    b.HasKey("TripParticipantsParticipantId", "TripReviewsReviewId");

                    b.HasIndex("TripReviewsReviewId");

                    b.ToTable("TripParticipantTripReview");
                });

            modelBuilder.Entity("TripTripGuide", b =>
                {
                    b.Property<int>("GuideId")
                        .HasColumnType("int");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.HasKey("GuideId", "TripId");

                    b.HasIndex("TripId");

                    b.ToTable("TripTripGuide");
                });

            modelBuilder.Entity("WebApplication1.Models.Trip", b =>
                {
                    b.Property<int>("TripId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TripId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<int>("GuideId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParticipantId")
                        .HasColumnType("int");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TripId")
                        .HasName("PK_Trip");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("WebApplication1.Models.TripGuide", b =>
                {
                    b.Property<int>("GuideId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GuideId"));

                    b.Property<string>("GuideEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuideName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuidePhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.HasKey("GuideId")
                        .HasName("PK_TripGuide");

                    b.ToTable("TripGuides");
                });

            modelBuilder.Entity("WebApplication1.Models.TripParticipant", b =>
                {
                    b.Property<int>("ParticipantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ParticipantEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParticipantName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParticipantPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.HasKey("ParticipantId")
                        .HasName("PK_TripParticipant");

                    b.ToTable("TripParticipants");
                });

            modelBuilder.Entity("WebApplication1.Models.TripReview", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("TripParticipantId")
                        .HasColumnType("int");

                    b.HasKey("ReviewId")
                        .HasName("PK_TripReview");

                    b.ToTable("TripReviews");
                });

            modelBuilder.Entity("TripParticipantTripReview", b =>
                {
                    b.HasOne("WebApplication1.Models.TripParticipant", null)
                        .WithMany()
                        .HasForeignKey("TripParticipantsParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.TripReview", null)
                        .WithMany()
                        .HasForeignKey("TripReviewsReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TripTripGuide", b =>
                {
                    b.HasOne("WebApplication1.Models.Trip", null)
                        .WithMany()
                        .HasForeignKey("GuideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.TripGuide", null)
                        .WithMany()
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication1.Models.TripParticipant", b =>
                {
                    b.HasOne("WebApplication1.Models.Trip", null)
                        .WithMany("TripParticipants")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication1.Models.TripReview", b =>
                {
                    b.HasOne("WebApplication1.Models.Trip", null)
                        .WithMany("TripReviews")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication1.Models.Trip", b =>
                {
                    b.Navigation("TripParticipants");

                    b.Navigation("TripReviews");
                });
#pragma warning restore 612, 618
        }
    }
}
